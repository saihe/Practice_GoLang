// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"practiceGoLang/models"
)

// GetEmployeeIDHandlerFunc turns a function with the right signature into a get employee ID handler
type GetEmployeeIDHandlerFunc func(GetEmployeeIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEmployeeIDHandlerFunc) Handle(params GetEmployeeIDParams) middleware.Responder {
	return fn(params)
}

// GetEmployeeIDHandler interface for that can handle valid get employee ID params
type GetEmployeeIDHandler interface {
	Handle(GetEmployeeIDParams) middleware.Responder
}

// NewGetEmployeeID creates a new http.Handler for the get employee ID operation
func NewGetEmployeeID(ctx *middleware.Context, handler GetEmployeeIDHandler) *GetEmployeeID {
	return &GetEmployeeID{Context: ctx, Handler: handler}
}

/* GetEmployeeID swagger:route GET /employee/{id} getEmployeeId

GetEmployeeID get employee ID API

*/
type GetEmployeeID struct {
	Context *middleware.Context
	Handler GetEmployeeIDHandler
}

func (o *GetEmployeeID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetEmployeeIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetEmployeeIDOKBody get employee ID o k body
//
// swagger:model GetEmployeeIDOKBody
type GetEmployeeIDOKBody struct {

	// employee
	Employee *models.Employee `json:"employee,omitempty"`
}

// Validate validates this get employee ID o k body
func (o *GetEmployeeIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmployee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEmployeeIDOKBody) validateEmployee(formats strfmt.Registry) error {
	if swag.IsZero(o.Employee) { // not required
		return nil
	}

	if o.Employee != nil {
		if err := o.Employee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getEmployeeIdOK" + "." + "employee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getEmployeeIdOK" + "." + "employee")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get employee ID o k body based on the context it is used
func (o *GetEmployeeIDOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEmployee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEmployeeIDOKBody) contextValidateEmployee(ctx context.Context, formats strfmt.Registry) error {

	if o.Employee != nil {
		if err := o.Employee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getEmployeeIdOK" + "." + "employee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getEmployeeIdOK" + "." + "employee")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetEmployeeIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEmployeeIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetEmployeeIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
